<template>
  <view class="bodyNvue bodyBG">
    <!-- 搜索框 -->
    <view :class="['header', { isAndroid: isAndroid }]">
      <view class="status_bar"></view>
      <view class="searchBox padding ">
        <view class="searchIconBox flex-center"><text class="uni-icon searchIcon">&#xe60a;</text></view>
        <view class="centent" @click="navigateBack(2)">
          <view v-if="filterParameters.username || searchCities.length > 0" class="addressList  hideScroll">
            <text v-if="filterParameters.username" class="item font-PingFangSCMedium">{{ filterParameters.username }}</text>
            <text v-if="!filterParameters.username" class="item  font-PingFangSCMedium">{{ searchCities[0].fullCityLabel }}</text>
            <text v-if="!filterParameters.username && searchCities.length > 1" class="more font-PingFangSCMedium">& 2 more</text>
          </view>
        </view>
        <text class="cancel font-PingFangSCMedium" @click="goHome()">取消</text>
      </view>
    </view>
    <!-- tab选项卡 -->
    <view :class="['tabStatus', { androidStatus: isAndroid }]"></view>
    <view class="tabBox ">
      <view class="tab" @click="changeTabCurrent(0)">
        <text class="text font-PingFangSCBold">排序</text>
      </view>
      <view class="tab" @click="changeTabCurrent(2)">
        <text class="text font-PingFangSCBold">{{ isList ? "地图" : "列表" }}</text>
      </view>
      <view class="resetFilters">
        <view class="flex-center padding" @click="exactSearch()">
          <text class="text font-PingFangSCMedium">筛选</text>
          <text class="uni-icon">&#xe60c;</text>
        </view>
      </view>
    </view>
    <!-- 精确筛选 -->

    <!-- 按列表显示 -->
    <view v-if="isList" class="main">
      <z-paging :default-page-size="6" :auto-show-back-to-top="true" ref="paging" v-model="listStaffs" @query="queryList">
        <view v-for="(item, index) in listStaffs" :key="item.id">
          <view v-if="item.recommend" class="recommend">
            <text class="title">没有搜索到匹配员工</text>
            <text class="description">您可能会对以下员工感兴趣~</text>
          </view>
          <view v-else class="itemList">
            <view class="picture" @click.stop="navigateTo(item.employeeId)">
              <image class="image" :src="item.avatar" mode="aspectFill"></image>
              <view class="tagBox flex-space-between">
                <view class="left">
                  <text class="flex-center font-PingFangSCMedium text">{{  getClassName(item.classificationId) }}</text>
                  <text class="flex-center font-PingFangSCMedium text">${{ item.lowestPrice || 0 }}/{{ (item.lowestPriceMinute || 0) / 60 }}h</text>
                </view>
                <text class="flex-center font-PingFangSCMedium text pink">{{ item.status === 1 ? "我有时间" : "等我有空" }}</text>
              </view>
            </view>

            <view class="info">
              <view class="flex-space-between details">
                <text class="name font-PingFangSCBold ">{{ item.username }}</text>
                <text v-if="item.isFocusOn" class="uni-icon active heart" @click.stop="followOperate(item)">&#xe60f;</text>
                <text v-else class="uni-icon heart" @click.stop="followOperate(item)">&#xe60e;</text>
              </view>
              <view class="flex-start details">
                <text class="font-PingFangSCMedium text">{{ item.city || 'AUS' }}, {{ item.province || 'AUS' }}{{ getPostCode(item.street) }}</text>
              </view>
              <view class="flex-start details">
                <text class="flex-center font-PingFangSCMedium text">{{ item.age }}岁</text>
                <text class="flex-center font-PingFangSCMedium text">|</text>
                <text class="flex-center font-PingFangSCMedium text">{{ item.height }}cm</text>
                <text class="flex-center font-PingFangSCMedium text">|</text>
                <text class="flex-center font-PingFangSCMedium text">{{ item.bustContent }}</text>
                <text class="flex-center font-PingFangSCMedium text">|</text>
                <text class="flex-center font-PingFangSCMedium text">{{ item.weight }}kg</text>
              </view>
            </view>
          </view>
        </view>
      </z-paging>
    </view>
    <!-- 按地图显示 -->
    <view v-else class="flex-end">
      <web-view ref="mapWebView" class="webView" :style="`height: ${SystemInfo.screenHeight - 190}px;`" :src="WebViewUrl" @onPostMessage="handlePostMessage"></web-view>
    </view>
    <!-- 排序 -->
    <uni-popup ref="popup" type="bottom" mask-click :safe-area="false">
      <view class="popupBox" v-if="popupType === 'slot'">
        <view class="head flex-center"><text class="font-PingFangSCMedium text">排序</text></view>
        <view class="list flex-center" v-for="(item, index) in sortList" :key="index" @click="sortChecked(index)">
          <text class="uni-icon checked text" v-if="item.checked">&#xe60d;</text>
          <text class="font-PingFangSCMedium text">{{ item.name }}</text>
        </view>
        <view :class="['cancel flex-center', { isAndroid: !isAndroid }]" @click="cancelPopup"><text class="font-PingFangSCMedium text">取消</text></view>
      </view>
      <!-- 时间 -->
      <!-- 			<view class="popupBox timeBox" v-else>
              <view class="timeHead flex-space-between ">
                <text class="confirm" style="opacity: 0;">完成</text>
                <text class="text font-PingFangSCMedium">预约时间</text>
                <text class="text confirm font-PingFangSCMedium" @click="cancelPopup">完成</text>
              </view>
              <scroll-view scroll-y class="scrollBox" :style="`height: ${SystemInfo.safeArea.height - SystemInfo.safeArea.top - (isAndroid ? 34 : 0)}px;`">
                <view class="timeList flex-space-between" v-for="(item, index) in timeList" :key="item.id" @click="queryByDate(item)">
                  <text class="text flex-center font-PingFangSCMedium">{{ item.name }}</text>
                  <text v-if="item.num > 0" class="text flex-center font-PingFangSCMedium count pink">{{ item.num }}</text>
                  <text v-else class="text flex-center font-PingFangSCMedium count">{{ item.num }}</text>
                </view>
              </scroll-view>
            </view> -->
    </uni-popup>
  </view>
</template>

<script>
// #ifdef APP-NVUE
const domModule = uni.requireNativePlugin("dom");
// src: "url('https://at.alicdn.com/t/font_2559015_t41puy5afi.ttf?t=1626832038594')"
domModule.addRule("fontFace", {
  fontFamily: "uniIcon",
  src: "url('../../../static/font/iconfont.ttf')"
});
domModule.addRule("fontFace", {
  fontFamily: "PingFangSCBold",
  src: "url('../../../static/font/PingFangSCBold.ttf')"
});
domModule.addRule("fontFace", {
  fontFamily: "PingFangSCMedium",
  src: "url('../../../static/font/PingFangSCMedium.ttf')"
});
domModule.addRule("fontFace", {
  fontFamily: "PingFangSCRegular",
  src: "url('../../../static/font/PingFangSCRegular.ttf')"
});
// #endif
import { mapState, mapMutations } from "vuex";
import $api from "@/common/js/api.js";
import $http from "@/common/js/httprequest.js";
import $base from "@/common/js/baseconfig.js";
import { queryEmployeeList, queryByOrderConformity, followStaff, unFollowStaff } from "@/common/js/apiCommon.js";
import { noLocationPrompt } from "@/common/js/common.js";
import moment from "moment";
export default {
  data() {
    return {
      SystemInfo: {
        screenHeight: undefined,
        safeArea: {
          height: undefined,
          top: undefined,
          bottom: undefined
        }
      }, // 系统信息
      classificationList: [],  //所属类型
      showMap: false,
      isAndroid: false,
      tabCurrent: 0, // 当前选中的tab
      isList: true, // 是否按列表显示
      filterParameters: {}, //筛选条件
      listStaffs: [], //员工列表
      listStaffNearBy: [],
      WebViewUrl: undefined,
      sortList: [
        {
          name: "价格（高-低）",
          id: 0,
          checked: false,
          sortCol: "lowestPrice",
          isASC: false
        },
        {
          name: "价格（低-高）",
          id: 1,
          checked: false,
          sortCol: "lowestPrice",
          isASC: true
        },
        {
          name: "最新",
          id: 2,
          checked: false,
          sortCol: "createTime",
          isASC: false
        },
        {
          name: "最好评",
          id: 3,
          checked: false,
          sortCol: "score",
          isASC: false
        },
        {
          name: "最符合搜索结果",
          id: 4,
          checked: true
        }
      ],
      sortIndex: 4,
      popupType: undefined,
      timeList: [],
      timeCheckedModel: {
        id: "all",
        name: "时间"
      },
      searchForm: undefined, //搜索来源 
      searchByDate: false,   //根据日期搜索
      showRecommend: false,  //是否显示推荐员工列表
      originalRecommend: false, //是否显示推荐员工列表
      teampCities: [],
      searchRecommend: false, //查询推荐数据
      pageRecommend: 0, //推荐数据是第几页
    };
  },
  mounted() {
    this.SystemInfo = uni.getSystemInfoSync();
    if (this.SystemInfo.platform === "android") {
      return (this.isAndroid = true);
    }
    return (this.isAndroid = false);
  },
  async onLoad(option) {
    const { from, recommend } = option;
    this.originalRecommend = recommend === "true";
    this.showRecommend = this.originalRecommend;
    this.searchForm = from;
    //精确查找参数
    let prevParameters = uni.getStorageSync("filterParameters");
    if (prevParameters) {
      Object.assign(this.filterParameters, prevParameters);
    }
    //区域
    const chooseCities = this.searchCities.map(item => {
      return item.province + "," + item.city;
    });
    const cityList = [...new Set(chooseCities)];
    if (cityList.length) {
      this.filterParameters.cityList = cityList;
    }
    this.teampCities = [...this.searchCities];
    await this.getClassList();  //查询所属类型
    //时间
    this.getTimeData();
    //位置
    this.getInfoByLocation();
  },
  destroyed() {
    uni.removeStorageSync("filterParameters");
  },
  computed: {
    ...mapState({
      searchCities: state => state.searchCities,
      currentLocation: state => state.currentLocation
    })
  },
  watch: {
    currentLocation() {
      this.getInfoByLocation();
    }
  },
  methods: {
    ...mapMutations(["setSearchCities"]),
    //查询所属类型
    async getClassList() {
      await $http.get($api.servicesList, {
        pageNum: 1,
        pageSize: 100
      }).then(res => {
        this.classificationList = res.list;
      });
    },
    // 关闭弹框
    cancelPopup() {
      this.$refs.popup.close();
    },
    sortChecked(index) {
      this.sortIndex = index;
      if(index === 4) {
        this.showRecommend = this.originalRecommend;
      } else {
        //排序不显示推荐
        this.showRecommend = false;
      }
      this.searchByDate = false;
      const cur = this.sortList[index];
      if (!cur.checked) {
        cur.checked = true;
        this.sortList.filter(item => item.checked && item.id !== cur.id).map(item => {item.checked = false;});
        if (this.isList) {
          this.searchRecommend = false;
          this.$refs.paging.reload();
        } else {
          this.isList = true;
        }
      }
      setTimeout(() => {
        this.cancelPopup();
      }, 300);
    },
    getQueryParams(pageNum, pageSize) {
      let params;
      if (this.searchByDate) {
        //按时间查询
        params = Object.assign({}, this.filterParameters, {
          page: pageNum,
          limit: pageSize,
          status: 1
        });
        if (this.timeCheckedModel.id !== "all") {
          params.queryTime = this.timeCheckedModel.id;
        }
        this.setSearchCities(this.teampCities);
      } else if (this.sortIndex === 4) {
        //最佳符合查询
        params = Object.assign({}, this.filterParameters, {
          page: pageNum,
          limit: pageSize,
          status: 1
        });
        this.setSearchCities(this.teampCities);
      } else {
        //排序搜索
        const sortModel = this.sortList[this.sortIndex];
        params = {
          page: pageNum,
          limit: pageSize,
          sortCol: sortModel.sortCol,
          isASC: sortModel.isASC
        };
        this.setSearchCities([]);
      }
      return params;
    },
    goHome() {
      uni.switchTab({
        url: "../heart"
      });
    },
    navigateBack(e) {
      // 导航栏左侧返回按钮
      uni.navigateBack({
        delta: e,
        animationType: "slide-out-bottom"
      });
    },
    changeTabCurrent(e) {
      // 切换tab
      if (e === 0) {
        this.popupType = "slot";
        this.$refs.popup.open();
      } else if (e === 2) {
        if (this.isList && (!this.currentLocation || !this.currentLocation.city)) {
          noLocationPrompt(); //未获取到定位信息
          return;
        }
        this.timeCheckedModel.name = "时间";
        this.isList = !this.isList;
        this.showRecommend = true;
        this.searchRecommend = false;
      }
      this.tabCurrent = e;
    },
    navigateTo(id) {
      // 个人详情
      uni.navigateTo({
        url: "../userDetails/userDetails?id=" + id
      });
    },
    queryList(pageNum, pageSize) {
      const params = this.getQueryParams(pageNum, pageSize);
      if(pageNum > 1 && this.searchRecommend) {
        //查询推荐数据
        params.page = pageNum - this.pageRecommend;
        this.queryRecommendList(params, true).then(res=> {
          this.$refs.paging.complete(res);
        })
      } else {
        this.searchRecommend = false;
        this.pageRecommend = 0;
        //精确查询
        queryEmployeeList(params, true).then(res => {
          console.log("查询结果：",res.result.data);
          const resultList = res.result.data;
          if(resultList.length === pageSize) {
            this.$refs.paging.complete(resultList);
          } else if (this.showRecommend) {
            this.searchRecommend = true;
            this.pageRecommend = pageNum -1;
            params.page = 1;
            //查询推荐数据
            this.queryRecommendList(params, false).then(data => {
              if(data.length > 0) {
                resultList.push({ recommend: true });
                resultList.push(...data);
              }
              this.$refs.paging.complete(resultList);
            }).catch(err=> {
              this.$refs.paging.complete(resultList);
            })
          } else {
            this.$refs.paging.complete(resultList);
          }
        });
      }
    },
    //查询推荐数据
    queryRecommendList(params, load) {
      const notNull = { ...params };
      //推荐数据都只显示我当前State的搜索结果
      delete params.cityList;
      if(this.currentLocation && this.currentLocation.province) {
        params.province = this.currentLocation.province;
      }
      params.notFull = true;
      params.notFullJson = JSON.stringify(notNull);
      return new Promise((resolve, reject)=>{
        queryByOrderConformity(params, load).then(res => {
          // console.log("搜索结果2：", res);	
          resolve(res.result.data);
        }).catch(err=> {
          reject(err);
        });
      })
    },
    followOperate(obj) {
      if (obj.isFocusOn) {
        // 取消关注
        unFollowStaff(obj.employeeId).then(res => {
          obj.isFocusOn = !obj.isFocusOn;
          uni.showToast({
            title: "已取消关注"
          });
        });
      } else {
        // 关注
        followStaff(obj.storeId, obj.employeeId).then(res => {
          obj.isFocusOn = !obj.isFocusOn;
          uni.showToast({
            title: "关注成功"
          });
        });
      }
    },
    //接收webview数据
    handlePostMessage(obj) {
      const { data } = obj.detail;
      if (data[0].action === "loaded") {
        this.postStaffToMap();
      }
    },
    postStaffToMap() {
      this.$refs.mapWebView.evalJs(`setStaffList(${JSON.stringify(this.listStaffNearBy)})`);
    },
    //时间列表
    getTimeData() {
      this.timeList.push({
        id: "all",
        name: "未来7天可预约",
        num: 0
      });
      this.timeList.push({
        id: moment().format("YYYY-MM-DD"),
        name: "今天",
        num: 0
      });
      for (var i = 1; i < 7; i++) {
        const date = moment().add(i, "d").locale("zh-cn");
        this.timeList.push({
          id: date.format("YYYY-MM-DD"),
          name: date.format("ddd Do MMM"),
          num: 0
        });
      }
      this.staffNumsByDate();
    },
    //点击按时间查询
    queryByDate(obj) {
      if (obj.num > 0) {
        this.searchByDate = true;
        const { id, name } = obj;
        this.timeCheckedModel.id = id;
        this.timeCheckedModel.name = id === "all" ? "时间" : name;
        if (this.isList) {
          this.showRecommend = true;
          this.searchRecommend = false;
          this.$refs.paging.reload();
        } else {
          this.isList = true;
        }
        setTimeout(() => {
          this.cancelPopup();
        }, 300);
      }
    },
    //按时间统计
    staffNumsByDate() {
      //全部
      queryEmployeeList({
        ...this.filterParameters,
        page: 1,
        limit: 1,
        status: 1
      }, false).then(res => {
        this.timeList[0].num = Number(res.result.count);
      });
      //按天统计
      this.timeList.filter(item => item.id !== "all").map(item => {
        queryEmployeeList({
          ...this.filterParameters,
          page: 1,
          limit: 1,
          status: 1,
          queryTime: item.id
        }, false).then(res => {
          item.num = Number(res.result.count);
        });
      });
    },
    //依赖位置进行查询
    getInfoByLocation() {
      //当前State“我有时间”的员工和“等我有空”员工；
      const params = { page: 1, limit: 2000 };
      if(this.currentLocation && this.currentLocation.province) {
        params.province = this.currentLocation.province;
      }
      this.WebViewUrl = `/hybrid/html/maps.html?key=${$base.googleMapAPIKey}&address=${encodeURIComponent(JSON.stringify(this.currentLocation))}`;
      queryEmployeeList(params, false).then(res => {
        this.listStaffNearBy = res.result.data;
        this.postStaffToMap()
      });
    },
    //精确搜索点击
    exactSearch(){
      if(this.searchForm === 'home' || this.searchForm === 'search'){
        uni.redirectTo({
          url:'../searchFilter/searchFilter'
        })
      } else {
        this.navigateBack(1);
      }
    },
    getPostCode(street) {
      if(street) {
        const str = street.replace(/\s+/g,'');
        const code =  str.substr(str.length - 4);
        const regex = /^[0-9]*$/
        if(regex.test(code)) return ', ' + code;
      }
      return ''
    },
    getClassName(id) {
      if(this.classificationList){
        const classObj = this.classificationList.find(item => item.id  == id); //id数据类型不同
        if(classObj) return classObj.content;
      }
      return '';
    }
  }
};
</script>

<style lang="scss">
// 字体样式
.uni-icon {
  font-family: uniIcon;
  font-size: 16px;
  font-style: normal;
}

.font-PingFangSCBold {
  font-family: PingFangSCBold;
  font-weight: 500;
  font-style: normal;
}

.font-PingFangSCMedium {
  font-family: PingFangSCMedium;
  font-weight: 500;
  font-style: normal;
}

.font-PingFangSCRegular {
  font-family: PingFangSCRegular;
  font-weight: 400;
  font-style: normal;
}
</style>
<style lang="scss" scoped src="../css/searchList.scss"></style>
